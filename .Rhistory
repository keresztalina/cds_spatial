my_min_price <- 50000
my_max_price <- 150000
# How many rooms does the flat have?
my_rooms_choice <- c(2, 3, 4, 5)
# How big is the flat?
my_min_size <- 40
my_max_size <- 120
# How far in meters is the flat from the center of Budapest?
my_min_distance_center <- 0
my_max_distance_center <- 5000
# How far in meters is the flat from the nearest public transport stop of any kind?
my_min_distance_stop_any <- 0
my_max_distance_stop_any <- 100
# How far in meters is the flat from the nearest railway-type public transport stop?
my_min_distance_stop_rail <- 0
my_max_distance_stop_rail <- 7000
show_options(flats,
my_animals_choice,
my_condition_choice,
my_elevator_choice,
my_quarter_choice,
my_min_price,
my_max_price,
my_rooms_choice,
my_min_size,
my_max_size,
my_min_distance_center,
my_max_distance_center,
my_min_distance_stop_any,
my_max_distance_stop_any,
my_min_distance_stop_rail,
my_max_distance_stop_rail)
citation("leaflet")
citation("geosphere")
citation("tidyverse")
stops <- read.csv("data/stops.txt")
stop_times <- read.csv("data/stop_times.txt")
trips <- read.csv("data/trips.txt")
routes <- read.csv("data/routes.txt")
s <- stops %>%
select(stop_id,
stop_name,
stop_lat,
stop_lon)
# load packages
library(tidyverse)
s <- stops %>%
select(stop_id,
stop_name,
stop_lat,
stop_lon)
rm(stops)
r <- routes %>%
select(route_id,
route_short_name,
route_type)
rm(routes) # remove unnecessary data frame
# convert variable to factor for easier processing
r$route_type <- as.factor(r$route_type)
# define levels
levels(r$route_type) <- c("tram",
"metro",
"bus",
"ship",
"trolleybus",
"commuter rail")
t <- trips %>%
select(route_id,
trip_id)
rm(trips) # remove unnecessary data frame
st <- stop_times %>%
select(trip_id,
stop_id)
rm(stop_times) # remove unnecessary data frame
# join data of stops with data of trips
df <- left_join(s, st)
df <- df %>%
filter(!is.na(trip_id))
rm(s) # remove unnecessary data frame
rm(st) # remove unnecessary data frame
# join with data of possible routes
df <- left_join(df, t)
rm(t) # remove unnecessary data frame
# join with data of route info
df <- left_join(df, r)
View(df)
df2 <- df %>%
select(!c(stop_id,
trip_id,
route_id))
df2 <- unique(df2)
View(df2)
df_new <- df2 %>%
group_by(stop_name, stop_lat, stop_lon, route_type) %>%
summarize(route_count = n_distinct(route_short_name))
View(df_new)
stops_cleaned <- df_new %>%
group_by(stop_name, route_type) %>%
summarise(lat = mean(stop_lat),
lon = mean(stop_lon),
routes = sum(route_count))
View(stops_cleaned)
write.csv(stops_cleaned,
"data/stops_revised.csv")
# load packages
library(tidyverse)
library(leaflet)
library(geosphere)
library(RColorBrewer)
library(measurements)
stops <- read.csv("data/stops_revised.csv")
flats <- read.csv("data/flats_revised.csv")
bud_center <- data.frame(lat = c(47.4925),
lon = c(19.051389))
flats$distance_to_bud_center <- distHaversine(
p1 = cbind(flats$lon, flats$lat),
p2 = cbind(bud_center$lon, bud_center$lat)
)
# initialize an empty vector to store the nearest distances
nearest_distances <- vector("numeric", length = nrow(flats))
# loop through each row in "flats" and calculate the distance to each row in "stops", then select the smallest one
for (i in 1:nrow(flats)) {
distances_to_stops <- distHaversine(cbind(flats[i, "lon"], flats[i, "lat"]),
cbind(stops$lon, stops$lat))
nearest_distances[i] <- min(distances_to_stops)
}
# add the nearest distance to the "flats" dataframe as a new column
flats$nearest_stop_distance <- nearest_distances
# filter for rail-type stops
rail_stops <- stops %>%
filter(route_type == "tram" | route_type == "metro" | route_type == "commuter rail")
# initialize an empty vector to store the nearest distances
nearest_distances_rail <- vector("numeric", length = nrow(flats))
# loop through each row in "flats" and calculate the distance to each row in "stops", then select the smallest one
for (i in 1:nrow(flats)) {
distances_to_stops <- distHaversine(cbind(flats[i, "lon"], flats[i, "lat"]),
cbind(rail_stops$lon, rail_stops$lat))
nearest_distances_rail[i] <- min(distances_to_stops)
}
# add the nearest distance to the "flats" dataframe as a new column
flats$nearest_stop_distance_rail <- nearest_distances_rail
View(flats)
write.csv(flats,
"data/flats_w_distances.csv",
row.names = FALSE)
# load packages
library(tidyverse)
library(leaflet)
library(geosphere)
library(RColorBrewer)
library(measurements)
flats <- read.csv("data/flats_w_distances.csv")
str(flats)
# Does the flat allow pets?
demo_animals_choice <- c("yes",
"only small pets",
"no",
NA)
# What is the condition of the flat?
demo_condition_choice <- c("newly built",
"like new",
"renovated",
"good",
"in need of renovation",
NA)
# Does the building have an elevator?
demo_elevator_choice <- c("yes",
"no",
NA)
# Which quarter of Budapest is the flat located in?
demo_quarter_choice <- c(1, 2, 3, 4, 5,
6, 7, 8, 9, 10,
11, 12, 13, 14, 15,
16, 17, 18, 19, 20,
21, 22, 23)
# What is the price range for the apartment?
demo_min_price <- 50000
demo_max_price <- 2000000
# How many rooms does the flat have?
demo_rooms_choice <- c(1, 2, 3, 4, 5)
# How big is the flat?
demo_min_size <- 12
demo_max_size <- 500
# How far in meters is the flat from the center of Budapest?
demo_min_distance_center <- 0
demo_max_distance_center <- 18000
# How far in meters is the flat from the nearest public transport stop of any kind?
demo_min_distance_stop_any <- 0
demo_max_distance_stop_any <- 700
# How far in meters is the flat from the nearest railway-type public transport stop?
demo_min_distance_stop_rail <- 0
demo_max_distance_stop_rail <- 7000
# Does the flat allow pets?
my_animals_choice <- c("yes",
"only small pets")
# What is the condition of the flat?
my_condition_choice <- c("newly built",
"like new",
"renovated",
"good")
# Does the building have an elevator?
my_elevator_choice <- c("yes")
# Which quarter of Budapest is the flat located in?
my_quarter_choice <- c(1, 2, 3, 4, 5,
6, 7, 8, 9, 10,
11, 12, 13, 14, 15,
16, 17, 18, 19, 20,
21, 22, 23)
# What is the price range for the apartment?
my_min_price <- 50000
my_max_price <- 150000
# How many rooms does the flat have?
my_rooms_choice <- c(2, 3, 4, 5)
# How big is the flat?
my_min_size <- 40
my_max_size <- 120
# How far in meters is the flat from the center of Budapest?
my_min_distance_center <- 0
my_max_distance_center <- 5000
# How far in meters is the flat from the nearest public transport stop of any kind?
my_min_distance_stop_any <- 0
my_max_distance_stop_any <- 100
# How far in meters is the flat from the nearest railway-type public transport stop?
my_min_distance_stop_rail <- 0
my_max_distance_stop_rail <- 7000
stops <- read.csv("data/stops_revised.csv")
show_options <- function(data,
stops_data,
animals_choice,
condition_choice,
elevator_choice,
quarter_choice,
min_price,
max_price,
rooms_choice,
min_size,
max_size,
min_distance_center,
max_distance_center,
min_distance_stop_any,
max_distance_stop_any,
min_distance_stop_rail,
max_distance_stop_rail) {
##### FILTER DATA BY INPUT PARAMETERS
selection <- flats %>%
# apply animals filter
filter(animals %in% animals_choice) %>%
# apply condition filter
filter(condition %in% condition_choice) %>%
# apply elevator choice
filter(elevator %in% elevator_choice) %>%
# apply quarter choice
filter(quarter %in% quarter_choice) %>%
# apply price choice
filter(price >= min_price & price <= max_price) %>%
# apply room number choice
filter(rooms %in% rooms_choice) %>%
# apply size choice
filter(size >= min_size & size <= max_size) %>%
# apply distance from center choice
filter(distance_to_bud_center >= min_distance_center & distance_to_bud_center <= max_distance_center) %>%
# apply distance from any public transport filter
filter(nearest_stop_distance >= min_distance_stop_any & nearest_stop_distance <= max_distance_stop_any) %>%
# apply distance from rails transport filter
filter(nearest_stop_distance_rail >= min_distance_stop_rail & nearest_stop_distance_rail <= max_distance_stop_rail)
##### PLOT
if (nrow(selection) == 0) {
print("There are no listings that match your criteria. Please broaden your search parameters.")
} else {
mymap <- leaflet() %>%
addTiles() %>%
setView(
lng = 19.0513,
lat = 47.4925,
zoom = 12)
for (i in seq_len(nrow(selection))) {
lat <- selection$lat[i]
lon <- selection$lon[i]
url <- selection$url[i]
price <- selection$price[i]
mymap <- mymap %>%
addMarkers(lng = lon,
lat = lat,
popup = paste0(price,
" HUF, ",
"<a href='",
url,
"' target='_blank'>See listing</a>"))
}
for (i in seq_len(nrow(stops))) {
lat <- stops$lat[i]
lon <- stops$long[i]
routes <- stops$routes[i]
mymap <- mymap %>%
addCircleMarkers(lng = lon,
lat = lat,
radius = routes * 0.1,
fillOpacity = 0.5,
color = "blue",
stroke = FALSE)
}
mymap
}
}
show_options(flats,
stops,
my_animals_choice,
my_condition_choice,
my_elevator_choice,
my_quarter_choice,
my_min_price,
my_max_price,
my_rooms_choice,
my_min_size,
my_max_size,
my_min_distance_center,
my_max_distance_center,
my_min_distance_stop_any,
my_max_distance_stop_any,
my_min_distance_stop_rail,
my_max_distance_stop_rail)
View(stops)
show_options <- function(data,
stops_data,
animals_choice,
condition_choice,
elevator_choice,
quarter_choice,
min_price,
max_price,
rooms_choice,
min_size,
max_size,
min_distance_center,
max_distance_center,
min_distance_stop_any,
max_distance_stop_any,
min_distance_stop_rail,
max_distance_stop_rail) {
##### FILTER DATA BY INPUT PARAMETERS
selection <- flats %>%
# apply animals filter
filter(animals %in% animals_choice) %>%
# apply condition filter
filter(condition %in% condition_choice) %>%
# apply elevator choice
filter(elevator %in% elevator_choice) %>%
# apply quarter choice
filter(quarter %in% quarter_choice) %>%
# apply price choice
filter(price >= min_price & price <= max_price) %>%
# apply room number choice
filter(rooms %in% rooms_choice) %>%
# apply size choice
filter(size >= min_size & size <= max_size) %>%
# apply distance from center choice
filter(distance_to_bud_center >= min_distance_center & distance_to_bud_center <= max_distance_center) %>%
# apply distance from any public transport filter
filter(nearest_stop_distance >= min_distance_stop_any & nearest_stop_distance <= max_distance_stop_any) %>%
# apply distance from rails transport filter
filter(nearest_stop_distance_rail >= min_distance_stop_rail & nearest_stop_distance_rail <= max_distance_stop_rail)
##### PLOT
if (nrow(selection) == 0) {
print("There are no listings that match your criteria. Please broaden your search parameters.")
} else {
mymap <- leaflet() %>%
addTiles() %>%
setView(
lng = 19.0513,
lat = 47.4925,
zoom = 12)
for (i in seq_len(nrow(selection))) {
lat <- selection$lat[i]
lon <- selection$lon[i]
url <- selection$url[i]
price <- selection$price[i]
mymap <- mymap %>%
addMarkers(lng = lon,
lat = lat,
popup = paste0(price,
" HUF, ",
"<a href='",
url,
"' target='_blank'>See listing</a>"))
}
for (i in seq_len(nrow(stops))) {
lat <- stops$lat[i]
lon <- stops$lon[i]
routes <- stops$routes[i]
mymap <- mymap %>%
addCircleMarkers(lng = lon,
lat = lat,
radius = routes * 0.1,
fillOpacity = 0.5,
color = "blue",
stroke = FALSE)
}
mymap
}
}
show_options(flats,
stops,
my_animals_choice,
my_condition_choice,
my_elevator_choice,
my_quarter_choice,
my_min_price,
my_max_price,
my_rooms_choice,
my_min_size,
my_max_size,
my_min_distance_center,
my_max_distance_center,
my_min_distance_stop_any,
my_max_distance_stop_any,
my_min_distance_stop_rail,
my_max_distance_stop_rail)
show_options <- function(data,
stops_data,
animals_choice,
condition_choice,
elevator_choice,
quarter_choice,
min_price,
max_price,
rooms_choice,
min_size,
max_size,
min_distance_center,
max_distance_center,
min_distance_stop_any,
max_distance_stop_any,
min_distance_stop_rail,
max_distance_stop_rail) {
##### FILTER DATA BY INPUT PARAMETERS
selection <- flats %>%
# apply animals filter
filter(animals %in% animals_choice) %>%
# apply condition filter
filter(condition %in% condition_choice) %>%
# apply elevator choice
filter(elevator %in% elevator_choice) %>%
# apply quarter choice
filter(quarter %in% quarter_choice) %>%
# apply price choice
filter(price >= min_price & price <= max_price) %>%
# apply room number choice
filter(rooms %in% rooms_choice) %>%
# apply size choice
filter(size >= min_size & size <= max_size) %>%
# apply distance from center choice
filter(distance_to_bud_center >= min_distance_center & distance_to_bud_center <= max_distance_center) %>%
# apply distance from any public transport filter
filter(nearest_stop_distance >= min_distance_stop_any & nearest_stop_distance <= max_distance_stop_any) %>%
# apply distance from rails transport filter
filter(nearest_stop_distance_rail >= min_distance_stop_rail & nearest_stop_distance_rail <= max_distance_stop_rail)
##### PLOT
if (nrow(selection) == 0) {
print("There are no listings that match your criteria. Please broaden your search parameters.")
} else {
mymap <- leaflet() %>%
addTiles() %>%
setView(
lng = 19.0513,
lat = 47.4925,
zoom = 12)
for (i in seq_len(nrow(selection))) {
lat <- selection$lat[i]
lon <- selection$lon[i]
url <- selection$url[i]
price <- selection$price[i]
mymap <- mymap %>%
addMarkers(lng = lon,
lat = lat,
popup = paste0(price,
" HUF, ",
"<a href='",
url,
"' target='_blank'>See listing</a>"))
}
for (i in seq_len(nrow(stops))) {
lat <- stops$lat[i]
lon <- stops$lon[i]
routes <- stops$routes[i]
mymap <- mymap %>%
addCircleMarkers(lng = lon,
lat = lat,
radius = routes * 0.3,
fillOpacity = 0.3,
color = "blue",
stroke = FALSE)
}
mymap
}
}
show_options(flats,
stops,
my_animals_choice,
my_condition_choice,
my_elevator_choice,
my_quarter_choice,
my_min_price,
my_max_price,
my_rooms_choice,
my_min_size,
my_max_size,
my_min_distance_center,
my_max_distance_center,
my_min_distance_stop_any,
my_max_distance_stop_any,
my_min_distance_stop_rail,
my_max_distance_stop_rail)
